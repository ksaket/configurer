// Basic Datastructure for storing configurations along with auditing info.
// Also defines skeleton for services.

package configurer;

option java_outer_classname = "Configurer";
option java_package = "com.google.appengine.config";
option java_generate_equals_and_hash = true;

// A tuple that stores user defined properties.
message Property {
  required string key = 1;
  optional string description = 2;
  enum Type {
  	TEXT = 1;
  	NUMBER = 2;
  	BOOLEAN = 3;
  	DATE = 4;
  	URL = 5;
  }
  required Type type = 3 [default =  TEXT];
  repeated string values = 4;

  // Whether this property can be modified by the application.
  required bool immutable = 5 [default = false];

  // TTL for this configuration. This is an approximate value.
  optional int64 expires_after = 6;
}

message AppEngineModule {
   required string module = 1;
   optional string version = 2;
}

message AuditLog {
  required string log_id = 1;
  required int64 when = 2;

  // Diff in form of String for properties added.
  repeated string added = 3;

  // Diff in form of String for properties removed.
  repeated string removed = 4;

  //Diff is for of String for properties modified.
  repeated string modified = 5;

  // Admin user that modified this property.
  required string user = 6;
}

// Layout for a configuration file.
message Configuration {
  // Identifier for this configuration.
  required string id = 1;

  // Namespace under which this configuration lives. 
  required string namespace = 2 [default = ''];

  // Module which owns this configuration.
  optional AppEngineModule module = 3;

  // Should this configuration be stored in Memcache as well.
  required bool store_in_memcache = 4; 
  repeated Property properties = 5;
  required int32 max_size = 6 [default = 33554432]; // 32 MB.
  optional int32 max_backup = 7 [default = 1];
}

message GetPropertyRequest {
  required string key = 1;
  optional string namespace = 2;
  optional AppEngineModule module = 3;
}

message GetPropertyResponse {
  repeated Property property = 1;
}

message RefreshConfigurationRequest {
  required string bucket = 1;
  required string file_name = 2;
  required int32 version = 3 [default = 0];
}

message RefreshConfigurationResponse {
  required bool done = 1;
  required int32 property_count = 2;
}

service ConfigurationService {
  rpc GetProperty(GetPropertyRequest) returns (GetPropertyResponse);
  
  rpc RefreshConfiguration(RefreshConfigurationRequest) returns (RefreshConfigurationResponse);
}